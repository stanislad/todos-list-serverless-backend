# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: stanislad
# "service" is the name of this project. This will also be added to your AWS resource names.
service: firstServerless

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-west-1
  environment:
    imageUploadBucket: my-image-upload-bucket-1
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:*
        - s3:*
        - ses:*
      Resource: '*'

custom:
  imageUploadBucket: my-image-upload-bucket-1
  region: eu-west-1

functions:
  addTodo:
    handler: src/addTodo.handler
    events:
      # - httpApi: "*"
    - http:
        path: /create/
        method: POST
        cors: true   
        headers:
          Access-Control-Allow-Origin: "'*'" # Static value
          Access-Control-Allow-Methods: "'GET, POST, OPTIONS'"
          Access-Control-Allow-Headers: "'Content-Type, Authorization'"

  fetchTodo:
    handler: src/fetchTodo.handler
    events:
    - http:
        path: /todo/{id}
        method: GET  
        cors: true   

  fetchTodos:
    handler: src/fetchTodos.handler
    events:
    - http:
        path: /todos/{userId}
        method: GET
        cors: true   

  updateTodo:
    handler: src/updateTodo.handler
    events:
    - http:
        path: /update/{id}
        method: POST
        cors: true   
        headers:
          Access-Control-Allow-Origin: "'*'" # Static value
          Access-Control-Allow-Methods: "'GET, POST, OPTIONS'"
          Access-Control-Allow-Headers: "'Content-Type, Authorization'"

  deleteTodo:
    handler: src/deleteTodo.handler
    events:
      - http:
          path: /delete/{id}
          method: delete
          cors:
            origin: '*'
            methods:
              - DELETE
            headers:
              - Content-Type

  completeTodo:
    handler: src/completeTodo.handler
    events:
      - http:
          path: /complete/{id}
          method: put
          cors:
            origin: '*'
            methods:
              - PUT
            headers:
              - Content-Type

  imageUpload:
    handler: src/imageUpload.handler
    events:
      - http:
          path: /upload/{id}
          method: put
          cors:
            origin: '*'
            methods:
              - PUT
            headers:
              - Content-Type

  register:
    handler: src/register.handler
    events:
      - http:
          path: /register/
          method: post
          cors:
            origin: '*'
            methods:
              - POST
            headers:
              - Content-Type

  login:
    handler: src/login.handler
    events:
      - http:
          path: /login/
          method: post
          cors:
            origin: '*'
            methods:
              - POST
            headers:
              - Content-Type

resources:
 Resources:
  TodoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TodoTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S    
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S    
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      
  ImageUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: my-image-upload-bucket-1
      PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

# allows public to view image
  ImageUploadBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ImageUploadBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: !Sub "${ImageUploadBucket.Arn}/*"    